extends layout

block title
	- auto title = "Edit package " ~ packageName;

block body
	- import vibe.data.json;
	- import dubregistry.web : Category;
	- auto pack = registry.getPackageInfo(packageName, true);
	- auto latest = pack.versions.length ? pack.versions[pack.versions.length-1] : Json(null);
	- auto latest_ver = latest.type == Json.Type.Object ? latest["version"].opt!string : "-";

	h2 General information

	dl
		dt Package
		dd
			a(href="#{req.rootDir}packages/#{packageName}")= packageName

		dt Latest version
		dd= latest_ver

	form(method="POST", action="#{req.rootDir}my_packages/#{packageName}/remove")
		button(type="submit") Remove this package

	- auto update_check_index = registry.getUpdateQueuePosition(packageName);
	form(method="POST", action="#{req.rootDir}my_packages/#{packageName}/update")
		p
			button(type="submit", disabled=(update_check_index >= 0)) Trigger manual update
			- if (update_check_index == 0)
				| Package is currently being updated.
			- else if (update_check_index == 1)
				| Package is scheduled for an update check. Still have to wait for one more package.
			- else if (update_check_index > 1)
				| Package is scheduled for an update check. Still have to wait for #{update_check_index} other packages to complete.


	h2 Categories

	p You can choose up to four categories for this package here. Please select only the categories that match most closely. If you feel like there is a category missing, please edit the <a href="https://github.com/rejectedsoftware/dub-registry/blob/master/categories.json">category file</a> and submit a pull request.

	form(method="POST", action="#{req.rootDir}my_packages/#{packageName}/set_categories")
		- foreach (i; 0 .. 4)
			p Category #{i+1}:
				- string selected;
				- if (i < pack.categories.length) selected = pack.categories[i].get!string;
				select(name="categories_#{i}", id="category#{i}", size="1")
					- void outputCat(Category cat)
						- if (!cat)
							option(value="")
						- else
							option(value=cat.name, selected=cat.name==selected)= cat.indentedDescription
						- if (!cat || cat.subCategories.length)
							- foreach (c; cat ? cat.subCategories : categories)
								- outputCat(c);
					- outputCat(null);
		button(type="submit") Apply

	- if (pack.errors.length)
		h2 Package errors:
		ul
			- foreach_reverse (e; pack.errors)
				li.error= e.get!string

	h2 Badges

	p The following snippets can be used inside the project's README.md or on a website to display download statistics and a link to the DUB package:

	- void shield(string path, string caption)
		h3= caption
		img(src="https://img.shields.io/dub/#{path}")
		br
		| Markdown: code.copy-paste-snippet [![shields.io download badge](https://img.shields.io/dub/#{path})](https://code.dlang.org/packages/#{packageName})
		br
		| HTML: code.copy-paste-snippet &lt;a href="https://code.dlang.org/packages/#{packageName}"&gt;&lt;img alt="shields.io download badge" src="https://img.shields.io/dub/#{path}"&gt&lt;/a&gt;

	- shield("dd/"~packageName~".svg", "Daily downloads (all versions)");
	- shield("dw/"~packageName~".svg", "Weekly downloads (all versions)");
	- shield("dm/"~packageName~".svg", "Monthly downloads (all versions)");
	- shield("dt/"~packageName~".svg", "Total downloads (all versions)");
	- shield("dd/"~packageName~"/latest.svg", "Daily downloads (latest version)");
	- shield("dw/"~packageName~"/latest.svg", "Weekly downloads (latest version)");
	- shield("dm/"~packageName~"/latest.svg", "Monthly downloads (latest version)");
	- shield("dt/"~packageName~"/latest.svg", "Total downloads (latest version)");
	- if (latest_ver != "-")
		- shield("dd/"~packageName~"/"~latest_ver~".svg", "Daily downloads ("~latest_ver~")");
		- shield("dw/"~packageName~"/"~latest_ver~".svg", "Weekly downloads ("~latest_ver~")");
		- shield("dm/"~packageName~"/"~latest_ver~".svg", "Monthly downloads ("~latest_ver~")");
		- shield("dt/"~packageName~"/"~latest_ver~".svg", "Total downloads ("~latest_ver~")");


	h2 Repository

	- if (error.length)
		p.error= error

	form(method="POST", action="#{req.rootDir}my_packages/#{packageName}/set_repository")
		select(name="kind", size="1")
			- import dubregistry.repositories.repository;
			- if (supportsRepositoryKind("github"))
				option(value="github", selected=pack.repository.kind == "github") GitHub project
			- if (supportsRepositoryKind("bitbucket"))
				option(value="bitbucket", selected=pack.repository.kind == "bitbucket") Bitbucket project
			- if (supportsRepositoryKind("gitlab"))
				option(value="gitlab", selected=pack.repository.kind == "gitlab") GitLab project
		p
			label(for="owner") Repository owner:
			input(type="text", name="owner", value=pack.repository.owner.get!string)
		p
			label(for="project") Repository name:
			input(type="text", name="project", value=pack.repository.project.get!string)
		p
			button(type="submit") Apply
